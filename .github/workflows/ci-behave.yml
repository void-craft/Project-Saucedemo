name: Selenium BDD Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
        browser: [chrome, firefox]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Install additional dependencies for CI
        pip install allure-behave
    
    - name: Set up Chrome and ChromeDriver
      if: matrix.browser == 'chrome'
      uses: browser-actions/setup-chrome@v1
      with:
        chrome-version: stable
    
    - name: Set up Firefox and GeckoDriver
      if: matrix.browser == 'firefox'
      uses: browser-actions/setup-firefox@v1
      with:
        firefox-version: latest
    
    - name: Setup display for headless mode
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
    
    - name: Create necessary directories
      run: |
        mkdir -p allure_reports/screenshots
        mkdir -p test-results
        mkdir -p allure-results
      run: |
        # Set browser environment variable
        export BROWSER=${{ matrix.browser }}
        
        # Run tests with JUnit output for better reporting
        behave --junit --junit-directory=test-results features/
      env:
        BROWSER: ${{ matrix.browser }}
        HEADLESS: true
        DISPLAY: :99
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}-${{ matrix.browser }}
        path: test-results/
    
    - name: Upload screenshots on failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: screenshots-${{ matrix.python-version }}-${{ matrix.browser }}
        path: allure_reports/screenshots/
    
    - name: Generate Allure report
      if: always()
      run: |
        # Install Allure commandline tool
        curl -o allure-2.24.0.tgz -Ls https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.24.0/allure-commandline-2.24.0.tgz
        tar -zxvf allure-2.24.0.tgz
        sudo mv allure-2.24.0/bin/allure /usr/local/bin/
        sudo mv allure-2.24.0/lib /usr/local/lib/allure
        
        # Generate Allure report
        allure generate allure-results --clean -o allure-report
    
    - name: Upload Allure report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: allure-report-${{ matrix.python-version }}-${{ matrix.browser }}
        path: allure-report/
    
    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: test-results/*.xml
        check_name: "Test Results (${{ matrix.python-version }}, ${{ matrix.browser }})"

  # Optional: Deploy test reports to GitHub Pages
  deploy-reports:
    needs: test
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Download test artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts
    
    - name: Create reports directory
      run: |
        mkdir -p reports
        # Combine all test results
        find artifacts -name "*.xml" -exec cp {} reports/ \;
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./reports
        destination_dir: test-reports

  # Slack notification (optional)
  notify:
    needs: test
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Slack Notification
      uses: 8398a7/action-slack@v3
      if: failure()
      with:
        status: ${{ job.status }}
        channel: '#ci-cd'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        message: |
          Selenium BDD Tests failed!
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
